import random
import logging
import string
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
import pandas as pd

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
PROMO_CODE, MAIN_MENU, CITY, NAME, INTERESTS, ADDRESS = range(6)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (8 —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã)
def generate_promo_code():
    characters = string.ascii_letters + string.digits
    return ''.join(random.choice(characters) for _ in range(8))

# –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è
async def start(update: Update, context: CallbackContext) -> int:
    reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")]], one_time_keyboard=True)
    await update.message.reply_text(
        "–•–æ-—Ö–æ-—Ö–æ! üéÖ –≠—Ç–æ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞.\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—ä—è–≤–∏ —Å–≤–æ–π —Ç–∞–ª–æ–Ω. üéü\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–ª–æ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –µ–≥–æ —Å—é–¥–∞, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º! üéÑ",
        reply_markup=reply_markup
    )
    return PROMO_CODE

# –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def promo_code(update: Update, context: CallbackContext) -> int:
    promo_input = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if len(promo_input) != 8 or not promo_input.isalnum():
        await update.message.reply_text("–£–ø—Å! –≠—Ç–æ—Ç —Ç–∞–ª–æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞")
        return PROMO_CODE

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    context.user_data['promo_code'] = promo_input

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton("–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π"), KeyboardButton("–õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")],
        [KeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤"), KeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å —ç–ª—å—Ñ–æ–≤")]
    ], one_time_keyboard=True)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!üéÑ –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ ¬´–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞¬ª! üéÖ\n"
        "–ú–æ—è —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫ –µ—â—ë —è—Ä—á–µ –∏ —Ç–µ–ø–ª–µ–µ, –≤–µ–¥—å –¥–∞—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ. üéÅ\n\n"
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –¥–æ 20 –¥–µ–∫–∞–±—Ä—è.\n"
        "–£–∂–µ 21 –¥–µ–∫–∞–±—Ä—è —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º '–¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π', –∏ –ø–æ–¥–∞—Ä–∏—à—å —á–µ–ª–æ–≤–µ–∫—É —Ä–∞–¥–æ—Å—Ç—å –∏ –Ω–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏.\n\n"
        "üéâ –°—É–ø–µ—Ä–±–æ–Ω—É—Å!\n"
        "28 –¥–µ–∫–∞–±—Ä—è –º—ã –ø—Ä–æ–≤–µ–¥–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —à–∏–∫–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        "1. –ù–æ–≤—ã–π iPhone 16\n"
        "2. AirPods Max\n"
        "3. Apple Watch Series 10\n"
        "–ê —Ç–∞–∫–∂–µ –±–æ–ª–µ–µ 20 –∫–ª–∞—Å—Å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "‚ú® –£—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ.\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í—ã–±–∏—Ä–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! üòä",
        reply_markup=reply_markup
    )
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    if choice == "–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π":
        return await city(update, context)
    elif choice == "–õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥":
        return await personal_promo(update, context)
    elif choice == "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤":
        return await elf_care(update, context)
    elif choice == "–ü–æ–∫–æ—Ä–º–∏—Ç—å —ç–ª—å—Ñ–æ–≤":
        await update.message.reply_text("–≠–ª—å—Ñ—ã –±–ª–∞–≥–æ–¥–∞—Ä—è—Ç —Ç–µ–±—è –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! üç™")
        return MAIN_MENU

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
async def city(update: Update, context: CallbackContext) -> int:
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton("üåÜ –ú–æ—Å–∫–≤–∞"), KeyboardButton("üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], one_time_keyboard=True)

    await update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)
    return CITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
async def city_chosen(update: Update, context: CallbackContext) -> int:
    city = update.message.text
    if city == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return await main_menu(update, context)
    
    context.user_data['city'] = city
    await update.message.reply_text("–ö–∞–∫ –º–æ–∂–Ω–æ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n(–£–∫–∞–∂–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞)")
    return NAME

# –ò–º—è
async def name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã —Ç–≤–æ–π –°–∞–Ω—Ç–∞ —Å–º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫. "
        "(–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è 1 500 —Ä—É–±–ª–µ–π)"
    )
    return INTERESTS

# –ò–Ω—Ç–µ—Ä–µ—Å—ã
async def interests(update: Update, context: CallbackContext) -> int:
    context.user_data['interests'] = update.message.text
    await update.message.reply_text(
        "–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫?\n"
        "–£–∫–∞–∂–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Ç–≤–æ–π –°–∞–Ω—Ç–∞ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–±—è –∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫."
    )
    return ADDRESS

# –ê–¥—Ä–µ—Å
async def address(update: Update, context: CallbackContext) -> int:
    context.user_data['address'] = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
    df = pd.DataFrame([context.user_data])
    df.to_excel("participants.xlsx", mode="a", header=False, index=False)

    await update.message.reply_text(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n"
        "–£–∂–µ 21 –¥–µ–∫–∞–±—Ä—è —Ç—ã —Å—Ç–∞–Ω–µ—à—å –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –∏ –ø–æ—Ä–∞–¥—É–µ—à—å —Å–≤–æ–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. üéÅ\n"
        "–ü–æ–¥–∞—Ä–æ–∫ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 28 –¥–µ–∫–∞–±—Ä—è!\n\n"
        "üéâ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ –°—É–ø–µ—Ä–±–æ–Ω—É—Å!\n"
        "28 –¥–µ–∫–∞–±—Ä—è –º—ã –ø—Ä–æ–≤–µ–¥–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —à–∏–∫–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        "1. –ù–æ–≤—ã–π iPhone 16\n"
        "2. AirPods Max\n"
        "3. Apple Watch Series 10\n"
        "–ê —Ç–∞–∫–∂–µ –±–æ–ª–µ–µ 20 –∫–ª–∞—Å—Å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å? –ü–∏—à–∏ –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —ç–ª—å—Ñ–∞–º! üéÑ"
    )
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton("–õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å —ç–ª—å—Ñ–æ–≤")],
        [KeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤"), KeyboardButton("–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π")]
    ], one_time_keyboard=True)
    
    await update.message.reply_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    return MAIN_MENU

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    application = Application.builder().token("7454294617:AAFDXIlMmzlfZnhmToBl05dO4utSW6_Jh1Y").build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PROMO_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, promo_code)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, city_chosen)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
            INTERESTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, interests)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
        },
        fallbacks=[],
    )

    application.add_handler(conversation_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()  # –ó–∞–º–µ–Ω–∏–ª–∏ asyncio.run(main()) –Ω–∞ application.run_polling()

if __name__ == "__main__":
    main()
