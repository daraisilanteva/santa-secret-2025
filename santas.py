... import random
... import string
... import logging
... from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
... from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
... import pandas as pd
... 
... # –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
... logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
... logger = logging.getLogger(__name__)
... 
... # –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
... PROMO_CODE, MAIN_MENU, CITY, NAME, INTERESTS, ADDRESS = range(6)
... 
... # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (8 —Å–∏–º–≤–æ–ª–æ–≤, —Ü–∏—Ñ—Ä—ã –∏ –±—É–∫–≤—ã)
... def generate_promo_code():
...     characters = string.ascii_letters + string.digits
...     return ''.join(random.choice(characters) for _ in range(8))
... 
... # –ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è
... def start(update: Update, context: CallbackContext) -> int:
...     reply_markup = ReplyKeyboardMarkup([[KeyboardButton("–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥")]], one_time_keyboard=True)
...     update.message.reply_text(
...         "–•–æ-—Ö–æ-—Ö–æ! üéÖ –≠—Ç–æ –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞.\n\n"
...         "–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—ä—è–≤–∏ —Å–≤–æ–π —Ç–∞–ª–æ–Ω. üéü\n\n"
...         "–ï—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–ª–æ–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –µ–≥–æ —Å—é–¥–∞, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º! üéÑ",
...         reply_markup=reply_markup
...     )
...     return PROMO_CODE
... 
... # –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
... def promo_code(update: Update, context: CallbackContext) -> int:
    promo_input = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if len(promo_input) != 8 or not promo_input.isalnum():
        update.message.reply_text("–£–ø—Å! –≠—Ç–æ—Ç —Ç–∞–ª–æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞")
        return PROMO_CODE

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    context.user_data['promo_code'] = promo_input

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton("–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π"), KeyboardButton("–õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")],
        [KeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤"), KeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å —ç–ª—å—Ñ–æ–≤")]
    ], one_time_keyboard=True)
    
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç!üéÑ –Ø ‚Äî —Ç–≤–æ–π –±–æ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∏–≥—Ä–µ ¬´–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞¬ª! üéÖ\n"
        "–ú–æ—è —Ü–µ–ª—å ‚Äî —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–∞–∑–¥–Ω–∏–∫ –µ—â—ë —è—Ä—á–µ –∏ —Ç–µ–ø–ª–µ–µ, –≤–µ–¥—å –¥–∞—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—è—Ç–Ω–æ. üéÅ\n\n"
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –¥–æ 20 –¥–µ–∫–∞–±—Ä—è.\n"
        "–£–∂–µ 21 –¥–µ–∫–∞–±—Ä—è —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º '–¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π', –∏ –ø–æ–¥–∞—Ä–∏—à—å —á–µ–ª–æ–≤–µ–∫—É —Ä–∞–¥–æ—Å—Ç—å –∏ –Ω–æ–≤—ã–µ —ç–º–æ—Ü–∏–∏.\n\n"
        "üéâ –°—É–ø–µ—Ä–±–æ–Ω—É—Å!\n"
        "28 –¥–µ–∫–∞–±—Ä—è –º—ã –ø—Ä–æ–≤–µ–¥–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —à–∏–∫–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        "1. –ù–æ–≤—ã–π iPhone 16\n"
        "2. AirPods Max\n"
        "3. Apple Watch Series 10\n"
        "–ê —Ç–∞–∫–∂–µ –±–æ–ª–µ–µ 20 –∫–ª–∞—Å—Å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "‚ú® –£—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ.\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –í—ã–±–∏—Ä–∞–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! üòä",
        reply_markup=reply_markup
    )
    return MAIN_MENU

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(update: Update, context: CallbackContext) -> int:
    choice = update.message.text
    if choice == "–°—Ç–∞—Ç—å —Ç–∞–π–Ω—ã–º —Å–∞–Ω—Ç–æ–π":
        return city(update, context)
    elif choice == "–õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥":
        return personal_promo(update, context)
    elif choice == "–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤":
        return elf_care(update, context)
    elif choice == "–ü–æ–∫–æ—Ä–º–∏—Ç—å —ç–ª—å—Ñ–æ–≤":
        update.message.reply_text("–≠–ª—å—Ñ—ã –±–ª–∞–≥–æ–¥–∞—Ä—è—Ç —Ç–µ–±—è –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! üç™")
        return MAIN_MENU

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
def city(update: Update, context: CallbackContext) -> int:
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton("üåÜ –ú–æ—Å–∫–≤–∞"), KeyboardButton("üåâ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")],
        [KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], one_time_keyboard=True)

    update.message.reply_text("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:", reply_markup=reply_markup)
    return CITY

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ä–æ–¥–∞
def city_chosen(update: Update, context: CallbackContext) -> int:
    city = update.message.text
    if city == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        return main_menu(update, context)
    
    context.user_data['city'] = city
    update.message.reply_text("–ö–∞–∫ –º–æ–∂–Ω–æ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n(–£–∫–∞–∂–∏ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é. –≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞)")
    return NAME

# –ò–º—è
def name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text(
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, —á—Ç–æ–±—ã —Ç–≤–æ–π –°–∞–Ω—Ç–∞ —Å–º–æ–≥ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –Ω–∞–∏–ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫. "
        "(–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è 1 500 —Ä—É–±–ª–µ–π)"
    )
    return INTERESTS

# –ò–Ω—Ç–µ—Ä–µ—Å—ã
def interests(update: Update, context: CallbackContext) -> int:
    context.user_data['interests'] = update.message.text
    update.message.reply_text(
        "–ö—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫?\n"
        "–£–∫–∞–∂–∏ –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã —Ç–≤–æ–π –°–∞–Ω—Ç–∞ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–µ–±—è –∏ –±–µ–∑ –ø—Ä–æ–±–ª–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫."
    )
    return ADDRESS

# –ê–¥—Ä–µ—Å
def address(update: Update, context: CallbackContext) -> int:
    context.user_data['address'] = update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel
    df = pd.DataFrame([context.user_data])
    df.to_excel("participants.xlsx", mode="a", header=False, index=False)

    update.message.reply_text(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n"
        "–£–∂–µ 21 –¥–µ–∫–∞–±—Ä—è —Ç—ã —Å—Ç–∞–Ω–µ—à—å –¢–∞–π–Ω—ã–º –°–∞–Ω—Ç–æ–π –∏ –ø–æ—Ä–∞–¥—É–µ—à—å —Å–≤–æ–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. üéÅ\n"
        "–ü–æ–¥–∞—Ä–æ–∫ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ 28 –¥–µ–∫–∞–±—Ä—è!\n\n"
        "üéâ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ –°—É–ø–µ—Ä–±–æ–Ω—É—Å!\n"
        "28 –¥–µ–∫–∞–±—Ä—è –º—ã –ø—Ä–æ–≤–µ–¥–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —à–∏–∫–∞—Ä–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
        "1. –ù–æ–≤—ã–π iPhone 16\n"
        "2. AirPods Max\n"
        "3. Apple Watch Series 10\n"
        "–ê —Ç–∞–∫–∂–µ –±–æ–ª–µ–µ 20 –∫–ª–∞—Å—Å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤!\n\n"
        "–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å? –ü–∏—à–∏ –º–Ω–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —ç–ª—å—Ñ–∞–º! üéÑ"
    )
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    reply_markup = ReplyKeyboardMarkup([
        [KeyboardButton("–õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤"), KeyboardButton("–ü–æ–∫–æ—Ä–º–∏—Ç—å —ç–ª—å—Ñ–æ–≤")]
    ], one_time_keyboard=True)
    update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=reply_markup)
    
    return MAIN_MENU

# –õ–∏—á–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
def personal_promo(update: Update, context: CallbackContext) -> int:
    promo = generate_promo_code()
    context.user_data['personal_promo'] = promo
    update.message.reply_text(
        f"üéü –¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞ - {promo}\n\n"
        "–ü–æ–¥–µ–ª–∏—Å—å —ç—Ç–∏–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º —Å 5 –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ–∂–µ —Å–º–æ–≥–ª–∏ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –∏ —Å—Ç–∞—Ç—å –¢–∞–π–Ω—ã–º–∏ –°–∞–Ω—Ç–∞–º–∏! üéÖ\n\n"
        "–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å ‚Äî —Å–∫–æ—Ä–µ–µ –ø—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –¥–µ–ª–∏—Ç–µ—Å—å –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º! üéÑ",
        reply_markup=ReplyKeyboardMarkup([
            [KeyboardButton("–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ], one_time_keyboard=True)
    )
    return MAIN_MENU

# –°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ã —ç–ª—å—Ñ–æ–≤
def elf_care(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏—Ö —Å—é–¥–∞, –∏ –Ω–∞—à–∞ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —ç–ª—å—Ñ–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –ø–æ–º–æ–∂–µ—Ç! üéÑ‚ú®")
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –∫–∞–Ω–∞–ª
def handle_message(update: Update, context: CallbackContext):
    user_message = update.message.text
    user_name = update.message.from_user.full_name
    context.bot.send_message(chat_id='-1002311993514', text=f"–û—Ç {user_name}: {user_message}")
    update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ù–∞—à–∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–µ —ç–ª—å—Ñ—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º —Ç–≤–æ–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –°–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π! üéÑ‚ú®")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    updater = Updater("YOUR_BOT_TOKEN", use_context=True)

    dp = updater.dispatcher
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            PROMO_CODE: [MessageHandler(Filters.text & ~Filters.command, promo_code)],
            MAIN_MENU: [MessageHandler(Filters.text & ~Filters.command, main_menu)],
            CITY: [MessageHandler(Filters.text & ~Filters.command, city_chosen)],
            NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
            INTERESTS: [MessageHandler(Filters.text & ~Filters.command, interests)],
            ADDRESS: [MessageHandler(Filters.text & ~Filters.command, address)],
        },
        fallbacks=[],
    )

    dp.add_handler(conversation_handler)
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler

TOKEN = "7454294617:AAFDXIlMmzlfZnhmToBl05dO4utSW6_Jh1Y"
bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot, None, use_context=True)

app = Flask(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
def start(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –Ω–∞ Render!")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
dispatcher.add_handler(CommandHandler("start", start))

# Webhook-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram
@app.route(f"/{7454294617:AAFDXIlMmzlfZnhmToBl05dO4utSW6_Jh1Y}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return "ok"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
